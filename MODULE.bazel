"""Bazel module for shared extensions, tools and rules."""

module(
    name = "tx-kit-ext",
    version = "0.0.0",
)

################################################################
# Dependencies that are used by rules and tools
################################################################

# Build rules dependencies
# Dep "apple_support" must be included before `rules_cc` https://github.com/bazelbuild/apple_support
# It makes `dsymutil -s <exe> && dwarfdump <obj|a>` paths relative,
#   for deterministic build and simplifing debug setup.
#   --features=oso_prefix_is_pwd seems doesn't works https://keith.github.io/xcode-man-pages/ld.1.html#oso_prefix
#   can be replaced w/ other flags, e.g. --copt=-ffile-compilation-dir=. --linkopt=-Wl,-oso_prefix,
bazel_dep(name = "apple_support", version = "1.23.1")
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "rules_cc", version = "0.2.8")
bazel_dep(name = "rules_shell", version = "0.6.1")
bazel_dep(name = "rules_foreign_cc", version = "0.15.0")
# bazel_dep(name = "bazel_skylib", version = "1.8.1")

# WASM build support
bazel_dep(name = "emsdk", version = "4.0.13")
#TODO: find the way for local emsdk toolchain via .bazelrc config/overrides (same as w/ make/cmake/ninja/pkg_config/etc)
# use_extension("@emsdk//bazel:extensions.bzl", "emsdk_extension").configure(
#   emsdk_dir = "/Users/nik/emsdk",
#   enable_override = True,
# )

# Tools dependencies
bazel_dep(name = "rules_python", version = "1.6.3")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    #TODO: support requirements_lock generation by pyproject.toml
    hub_name = "pypi",
    python_version = "3.11",
    requirements_lock = "//tools:requirements.txt",
)
use_repo(pip, "pypi")
